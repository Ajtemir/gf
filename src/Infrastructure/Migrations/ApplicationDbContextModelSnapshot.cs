// <auto-generated />
using System;
using Infrastructure.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("main")
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.HasPostgresExtension(modelBuilder, "uuid-ossp");
            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Domain.Dictionary.Citizenship", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("NameKg")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("name_kg");

                    b.Property<string>("NameRu")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("name_ru");

                    b.HasKey("Id");

                    b.ToTable("citizenships", "main");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            NameKg = "Австралия",
                            NameRu = "Австралия"
                        },
                        new
                        {
                            Id = 2,
                            NameKg = "Австрия",
                            NameRu = "Австрия"
                        },
                        new
                        {
                            Id = 3,
                            NameKg = "Азербайджан",
                            NameRu = "Азербайджан"
                        },
                        new
                        {
                            Id = 4,
                            NameKg = "Албания",
                            NameRu = "Албания"
                        },
                        new
                        {
                            Id = 5,
                            NameKg = "Алжир",
                            NameRu = "Алжир"
                        },
                        new
                        {
                            Id = 6,
                            NameKg = "Ангола",
                            NameRu = "Ангола"
                        },
                        new
                        {
                            Id = 7,
                            NameKg = "Андорра",
                            NameRu = "Андорра"
                        },
                        new
                        {
                            Id = 8,
                            NameKg = "Антигуа жана Барбуда",
                            NameRu = "Антигуа и Барбуда"
                        },
                        new
                        {
                            Id = 9,
                            NameKg = "Аргентина",
                            NameRu = "Аргентина"
                        },
                        new
                        {
                            Id = 10,
                            NameKg = "Армения",
                            NameRu = "Армения"
                        },
                        new
                        {
                            Id = 11,
                            NameKg = "Ооганстан",
                            NameRu = "Афганистан"
                        },
                        new
                        {
                            Id = 12,
                            NameKg = "Багам Аралдары",
                            NameRu = "Багамы"
                        },
                        new
                        {
                            Id = 13,
                            NameKg = "Бангладеш",
                            NameRu = "Бангладеш"
                        },
                        new
                        {
                            Id = 14,
                            NameKg = "Барбадос",
                            NameRu = "Барбадос"
                        },
                        new
                        {
                            Id = 15,
                            NameKg = "Бахрейн",
                            NameRu = "Бахрейн"
                        },
                        new
                        {
                            Id = 16,
                            NameKg = "Беларусь",
                            NameRu = "Беларусь"
                        },
                        new
                        {
                            Id = 17,
                            NameKg = "Белиз",
                            NameRu = "Белиз"
                        },
                        new
                        {
                            Id = 18,
                            NameKg = "Бельгия",
                            NameRu = "Бельгия"
                        },
                        new
                        {
                            Id = 19,
                            NameKg = "Бенин",
                            NameRu = "Бенин"
                        },
                        new
                        {
                            Id = 20,
                            NameKg = "Болгария",
                            NameRu = "Болгария"
                        },
                        new
                        {
                            Id = 21,
                            NameKg = "Боливия",
                            NameRu = "Боливия"
                        },
                        new
                        {
                            Id = 22,
                            NameKg = "Босния жана Герцеговина",
                            NameRu = "Босния и Герцеговина"
                        },
                        new
                        {
                            Id = 23,
                            NameKg = "Ботсвана",
                            NameRu = "Ботсвана"
                        },
                        new
                        {
                            Id = 24,
                            NameKg = "Бразилия",
                            NameRu = "Бразилия"
                        },
                        new
                        {
                            Id = 25,
                            NameKg = "Бруней",
                            NameRu = "Бруней"
                        },
                        new
                        {
                            Id = 26,
                            NameKg = "Буркина-Фасо",
                            NameRu = "Буркина-Фасо"
                        },
                        new
                        {
                            Id = 27,
                            NameKg = "Бурунди",
                            NameRu = "Бурунди"
                        },
                        new
                        {
                            Id = 28,
                            NameKg = "Бутан",
                            NameRu = "Бутан"
                        },
                        new
                        {
                            Id = 29,
                            NameKg = "Вануату",
                            NameRu = "Вануату"
                        },
                        new
                        {
                            Id = 30,
                            NameKg = "Улуу Британия",
                            NameRu = "Великобритания"
                        },
                        new
                        {
                            Id = 31,
                            NameKg = "Венгрия",
                            NameRu = "Венгрия"
                        },
                        new
                        {
                            Id = 32,
                            NameKg = "Венесуэла",
                            NameRu = "Венесуэла"
                        },
                        new
                        {
                            Id = 33,
                            NameKg = "Чыгыш Тимор",
                            NameRu = "Восточный Тимор"
                        },
                        new
                        {
                            Id = 34,
                            NameKg = "Вьетнам",
                            NameRu = "Вьетнам"
                        },
                        new
                        {
                            Id = 35,
                            NameKg = "Габон",
                            NameRu = "Габон"
                        },
                        new
                        {
                            Id = 36,
                            NameKg = "Гаити",
                            NameRu = "Гаити"
                        },
                        new
                        {
                            Id = 37,
                            NameKg = "Гайана",
                            NameRu = "Гайана"
                        },
                        new
                        {
                            Id = 38,
                            NameKg = "Гамбия",
                            NameRu = "Гамбия"
                        },
                        new
                        {
                            Id = 39,
                            NameKg = "Гана",
                            NameRu = "Гана"
                        },
                        new
                        {
                            Id = 40,
                            NameKg = "Гватемала",
                            NameRu = "Гватемала"
                        },
                        new
                        {
                            Id = 41,
                            NameKg = "Гвинея",
                            NameRu = "Гвинея"
                        },
                        new
                        {
                            Id = 42,
                            NameKg = "Гвинея-Бисау",
                            NameRu = "Гвинея-Бисау"
                        },
                        new
                        {
                            Id = 43,
                            NameKg = "Германия",
                            NameRu = "Германия"
                        },
                        new
                        {
                            Id = 44,
                            NameKg = "Гондурас",
                            NameRu = "Гондурас"
                        },
                        new
                        {
                            Id = 45,
                            NameKg = "Гренада",
                            NameRu = "Гренада"
                        },
                        new
                        {
                            Id = 46,
                            NameKg = "Греция",
                            NameRu = "Греция"
                        },
                        new
                        {
                            Id = 47,
                            NameKg = "Грузия",
                            NameRu = "Грузия"
                        },
                        new
                        {
                            Id = 48,
                            NameKg = "Дания",
                            NameRu = "Дания"
                        },
                        new
                        {
                            Id = 49,
                            NameKg = "Джибути",
                            NameRu = "Джибути"
                        },
                        new
                        {
                            Id = 50,
                            NameKg = "Доминика",
                            NameRu = "Доминика"
                        },
                        new
                        {
                            Id = 51,
                            NameKg = "Доминикана",
                            NameRu = "Доминикана"
                        },
                        new
                        {
                            Id = 52,
                            NameKg = "Египет",
                            NameRu = "Египет"
                        },
                        new
                        {
                            Id = 53,
                            NameKg = "Замбия",
                            NameRu = "Замбия"
                        },
                        new
                        {
                            Id = 54,
                            NameKg = "Зимбабве",
                            NameRu = "Зимбабве"
                        },
                        new
                        {
                            Id = 55,
                            NameKg = "Израиль",
                            NameRu = "Израиль"
                        },
                        new
                        {
                            Id = 56,
                            NameKg = "Индия",
                            NameRu = "Индия"
                        },
                        new
                        {
                            Id = 57,
                            NameKg = "Индонезия",
                            NameRu = "Индонезия"
                        },
                        new
                        {
                            Id = 58,
                            NameKg = "Иордания",
                            NameRu = "Иордания"
                        },
                        new
                        {
                            Id = 59,
                            NameKg = "Ирак",
                            NameRu = "Ирак"
                        },
                        new
                        {
                            Id = 60,
                            NameKg = "Иран",
                            NameRu = "Иран"
                        },
                        new
                        {
                            Id = 61,
                            NameKg = "Ирландия",
                            NameRu = "Ирландия"
                        },
                        new
                        {
                            Id = 62,
                            NameKg = "Исландия",
                            NameRu = "Исландия"
                        },
                        new
                        {
                            Id = 63,
                            NameKg = "Испания",
                            NameRu = "Испания"
                        },
                        new
                        {
                            Id = 64,
                            NameKg = "Италия",
                            NameRu = "Италия"
                        },
                        new
                        {
                            Id = 65,
                            NameKg = "Йемен",
                            NameRu = "Йемен"
                        },
                        new
                        {
                            Id = 66,
                            NameKg = "Кабо-Верде",
                            NameRu = "Кабо-Верде"
                        },
                        new
                        {
                            Id = 67,
                            NameKg = "Казакстан",
                            NameRu = "Казахстан"
                        },
                        new
                        {
                            Id = 68,
                            NameKg = "Камбоджа",
                            NameRu = "Камбоджа"
                        },
                        new
                        {
                            Id = 69,
                            NameKg = "Камерун",
                            NameRu = "Камерун"
                        },
                        new
                        {
                            Id = 70,
                            NameKg = "Канада",
                            NameRu = "Канада"
                        },
                        new
                        {
                            Id = 71,
                            NameKg = "Катар",
                            NameRu = "Катар"
                        },
                        new
                        {
                            Id = 72,
                            NameKg = "Кения",
                            NameRu = "Кения"
                        },
                        new
                        {
                            Id = 73,
                            NameKg = "Кипр",
                            NameRu = "Кипр"
                        },
                        new
                        {
                            Id = 74,
                            NameKg = "Кирибати",
                            NameRu = "Кирибати"
                        },
                        new
                        {
                            Id = 75,
                            NameKg = "Кытай",
                            NameRu = "Китай"
                        },
                        new
                        {
                            Id = 76,
                            NameKg = "Колумбия",
                            NameRu = "Колумбия"
                        },
                        new
                        {
                            Id = 77,
                            NameKg = "Комор Аралдары",
                            NameRu = "Коморы"
                        },
                        new
                        {
                            Id = 78,
                            NameKg = "Конго",
                            NameRu = "Конго"
                        },
                        new
                        {
                            Id = 79,
                            NameKg = "Конго Демократиялык Республикасы",
                            NameRu = "ДР Конго"
                        },
                        new
                        {
                            Id = 80,
                            NameKg = "Корея Элдик Демократиялык Республикасы",
                            NameRu = "КНДР"
                        },
                        new
                        {
                            Id = 81,
                            NameKg = "Корея",
                            NameRu = "Корея"
                        },
                        new
                        {
                            Id = 82,
                            NameKg = "Коста-Рика",
                            NameRu = "Коста-Рика"
                        },
                        new
                        {
                            Id = 83,
                            NameKg = "Кот-д’Ивуар",
                            NameRu = "Кот-д’Ивуар"
                        },
                        new
                        {
                            Id = 84,
                            NameKg = "Куба",
                            NameRu = "Куба"
                        },
                        new
                        {
                            Id = 85,
                            NameKg = "Кувейт",
                            NameRu = "Кувейт"
                        },
                        new
                        {
                            Id = 86,
                            NameKg = "Кыргызстан",
                            NameRu = "Кыргызстан"
                        },
                        new
                        {
                            Id = 87,
                            NameKg = "Лаос",
                            NameRu = "Лаос"
                        },
                        new
                        {
                            Id = 88,
                            NameKg = "Латвия",
                            NameRu = "Латвия"
                        },
                        new
                        {
                            Id = 89,
                            NameKg = "Лесото",
                            NameRu = "Лесото"
                        },
                        new
                        {
                            Id = 90,
                            NameKg = "Либерия",
                            NameRu = "Либерия"
                        },
                        new
                        {
                            Id = 91,
                            NameKg = "Ливан",
                            NameRu = "Ливан"
                        },
                        new
                        {
                            Id = 92,
                            NameKg = "Ливия",
                            NameRu = "Ливия"
                        },
                        new
                        {
                            Id = 93,
                            NameKg = "Литва",
                            NameRu = "Литва"
                        },
                        new
                        {
                            Id = 94,
                            NameKg = "Лихтенштейн",
                            NameRu = "Лихтенштейн"
                        },
                        new
                        {
                            Id = 95,
                            NameKg = "Люксембург",
                            NameRu = "Люксембург"
                        },
                        new
                        {
                            Id = 96,
                            NameKg = "Маврикий",
                            NameRu = "Маврикий"
                        },
                        new
                        {
                            Id = 97,
                            NameKg = "Мавритания",
                            NameRu = "Мавритания"
                        },
                        new
                        {
                            Id = 98,
                            NameKg = "Мадагаскар",
                            NameRu = "Мадагаскар"
                        },
                        new
                        {
                            Id = 99,
                            NameKg = "Малави",
                            NameRu = "Малави"
                        },
                        new
                        {
                            Id = 100,
                            NameKg = "Малайзия",
                            NameRu = "Малайзия"
                        },
                        new
                        {
                            Id = 101,
                            NameKg = "Мали",
                            NameRu = "Мали"
                        },
                        new
                        {
                            Id = 102,
                            NameKg = "Мальдив Аралдары",
                            NameRu = "Мальдивы"
                        },
                        new
                        {
                            Id = 103,
                            NameKg = "Мальта",
                            NameRu = "Мальта"
                        },
                        new
                        {
                            Id = 104,
                            NameKg = "Марокко",
                            NameRu = "Марокко"
                        },
                        new
                        {
                            Id = 105,
                            NameKg = "Маршалл Аралдары",
                            NameRu = "Маршалловы Острова"
                        },
                        new
                        {
                            Id = 106,
                            NameKg = "Мексика",
                            NameRu = "Мексика"
                        },
                        new
                        {
                            Id = 107,
                            NameKg = "Микронезия",
                            NameRu = "Микронезия"
                        },
                        new
                        {
                            Id = 108,
                            NameKg = "Мозамбик",
                            NameRu = "Мозамбик"
                        },
                        new
                        {
                            Id = 109,
                            NameKg = "Молдавия",
                            NameRu = "Молдавия"
                        },
                        new
                        {
                            Id = 110,
                            NameKg = "Монако",
                            NameRu = "Монако"
                        },
                        new
                        {
                            Id = 111,
                            NameKg = "Монголия",
                            NameRu = "Монголия"
                        },
                        new
                        {
                            Id = 112,
                            NameKg = "Мьянма",
                            NameRu = "Мьянма"
                        },
                        new
                        {
                            Id = 113,
                            NameKg = "Намибия",
                            NameRu = "Намибия"
                        },
                        new
                        {
                            Id = 114,
                            NameKg = "Науру",
                            NameRu = "Науру"
                        },
                        new
                        {
                            Id = 115,
                            NameKg = "Непал",
                            NameRu = "Непал"
                        },
                        new
                        {
                            Id = 116,
                            NameKg = "Нигер",
                            NameRu = "Нигер"
                        },
                        new
                        {
                            Id = 117,
                            NameKg = "Нигерия",
                            NameRu = "Нигерия"
                        },
                        new
                        {
                            Id = 118,
                            NameKg = "Нидерланд",
                            NameRu = "Нидерланды"
                        },
                        new
                        {
                            Id = 119,
                            NameKg = "Никарагуа",
                            NameRu = "Никарагуа"
                        },
                        new
                        {
                            Id = 120,
                            NameKg = "Жаңы Зеландия",
                            NameRu = "Новая Зеландия"
                        },
                        new
                        {
                            Id = 121,
                            NameKg = "Норвегия",
                            NameRu = "Норвегия"
                        },
                        new
                        {
                            Id = 122,
                            NameKg = "Бириккен Араб Эмираттары",
                            NameRu = "ОАЭ"
                        },
                        new
                        {
                            Id = 123,
                            NameKg = "Оман",
                            NameRu = "Оман"
                        },
                        new
                        {
                            Id = 124,
                            NameKg = "Пакистан",
                            NameRu = "Пакистан"
                        },
                        new
                        {
                            Id = 125,
                            NameKg = "Палау",
                            NameRu = "Палау"
                        },
                        new
                        {
                            Id = 126,
                            NameKg = "Панама",
                            NameRu = "Панама"
                        },
                        new
                        {
                            Id = 127,
                            NameKg = "Папуа Жаңы Гвинея",
                            NameRu = "Папуа — Новая Гвинея"
                        },
                        new
                        {
                            Id = 128,
                            NameKg = "Парагвай",
                            NameRu = "Парагвай"
                        },
                        new
                        {
                            Id = 129,
                            NameKg = "Перу",
                            NameRu = "Перу"
                        },
                        new
                        {
                            Id = 130,
                            NameKg = "Польша",
                            NameRu = "Польша"
                        },
                        new
                        {
                            Id = 131,
                            NameKg = "Португалия",
                            NameRu = "Португалия"
                        },
                        new
                        {
                            Id = 132,
                            NameKg = "Орусия",
                            NameRu = "Россия"
                        },
                        new
                        {
                            Id = 133,
                            NameKg = "Руанда",
                            NameRu = "Руанда"
                        },
                        new
                        {
                            Id = 134,
                            NameKg = "Румыния",
                            NameRu = "Румыния"
                        },
                        new
                        {
                            Id = 135,
                            NameKg = "Сальвадор",
                            NameRu = "Сальвадор"
                        },
                        new
                        {
                            Id = 136,
                            NameKg = "Самоа",
                            NameRu = "Самоа"
                        },
                        new
                        {
                            Id = 137,
                            NameKg = "Сан-Марино",
                            NameRu = "Сан-Марино"
                        },
                        new
                        {
                            Id = 138,
                            NameKg = "Сан Томе жана Принсипи",
                            NameRu = "Сан-Томе и Принсипи"
                        },
                        new
                        {
                            Id = 139,
                            NameKg = "Сауд Арабия",
                            NameRu = "Саудовская Аравия"
                        },
                        new
                        {
                            Id = 140,
                            NameKg = "Түндүк Македония",
                            NameRu = "Северная Македония"
                        },
                        new
                        {
                            Id = 141,
                            NameKg = "Сейшель Аралдар",
                            NameRu = "Сейшелы"
                        },
                        new
                        {
                            Id = 142,
                            NameKg = "Сенегал",
                            NameRu = "Сенегал"
                        },
                        new
                        {
                            Id = 143,
                            NameKg = "Сент-Винсент жана Гренадиндер",
                            NameRu = "Сент-Винсент и Гренадины"
                        },
                        new
                        {
                            Id = 144,
                            NameKg = "Сент-Китс жана Невис",
                            NameRu = "Сент-Китс и Невис"
                        },
                        new
                        {
                            Id = 145,
                            NameKg = "Сент-Люсия",
                            NameRu = "Сент-Люсия	"
                        },
                        new
                        {
                            Id = 146,
                            NameKg = "Сербия",
                            NameRu = "Сербия"
                        },
                        new
                        {
                            Id = 147,
                            NameKg = "Сингапур",
                            NameRu = "Сингапур"
                        },
                        new
                        {
                            Id = 148,
                            NameKg = "Сирия",
                            NameRu = "Сирия"
                        },
                        new
                        {
                            Id = 149,
                            NameKg = "Словакия",
                            NameRu = "Словакия"
                        },
                        new
                        {
                            Id = 150,
                            NameKg = "Словения",
                            NameRu = "Словения"
                        },
                        new
                        {
                            Id = 151,
                            NameKg = "Америка Кошмо Штаттары",
                            NameRu = "США"
                        },
                        new
                        {
                            Id = 152,
                            NameKg = "Соломон Аралдары",
                            NameRu = "Соломоновы Острова"
                        },
                        new
                        {
                            Id = 153,
                            NameKg = "Сомали",
                            NameRu = "Сомали"
                        },
                        new
                        {
                            Id = 154,
                            NameKg = "Судан",
                            NameRu = "Судан"
                        },
                        new
                        {
                            Id = 155,
                            NameKg = "Суринам",
                            NameRu = "Суринам"
                        },
                        new
                        {
                            Id = 156,
                            NameKg = "Сьерра-Леоне",
                            NameRu = "Сьерра-Леоне	"
                        },
                        new
                        {
                            Id = 157,
                            NameKg = "Тажикстан",
                            NameRu = "Таджикистан"
                        },
                        new
                        {
                            Id = 158,
                            NameKg = "Таиланд",
                            NameRu = "Таиланд"
                        },
                        new
                        {
                            Id = 159,
                            NameKg = "Танзания",
                            NameRu = "Танзания"
                        },
                        new
                        {
                            Id = 160,
                            NameKg = "Того",
                            NameRu = "Того"
                        },
                        new
                        {
                            Id = 161,
                            NameKg = "Тонга",
                            NameRu = "Тонга"
                        },
                        new
                        {
                            Id = 162,
                            NameKg = "Тринидад жана Тобаго",
                            NameRu = "Тринидад и Тобаго	"
                        },
                        new
                        {
                            Id = 163,
                            NameKg = "Тувалу",
                            NameRu = "Тувалу"
                        },
                        new
                        {
                            Id = 164,
                            NameKg = "Тунис",
                            NameRu = "Тунис"
                        },
                        new
                        {
                            Id = 165,
                            NameKg = "Түркмөнстан",
                            NameRu = "Туркмения"
                        },
                        new
                        {
                            Id = 166,
                            NameKg = "Түркия",
                            NameRu = "Турция"
                        },
                        new
                        {
                            Id = 167,
                            NameKg = "Уганда",
                            NameRu = "Уганда"
                        },
                        new
                        {
                            Id = 168,
                            NameKg = "Өзбекстан",
                            NameRu = "Узбекистан"
                        },
                        new
                        {
                            Id = 169,
                            NameKg = "Украина",
                            NameRu = "Украина"
                        },
                        new
                        {
                            Id = 170,
                            NameKg = "Уругвай",
                            NameRu = "Уругвай"
                        },
                        new
                        {
                            Id = 171,
                            NameKg = "Фиджи",
                            NameRu = "Фиджи"
                        },
                        new
                        {
                            Id = 172,
                            NameKg = "Филиппин",
                            NameRu = "Филиппины"
                        },
                        new
                        {
                            Id = 173,
                            NameKg = "Финляндия",
                            NameRu = "Финляндия"
                        },
                        new
                        {
                            Id = 174,
                            NameKg = "Франция",
                            NameRu = "Франция"
                        },
                        new
                        {
                            Id = 175,
                            NameKg = "Хорватия",
                            NameRu = "Хорватия"
                        },
                        new
                        {
                            Id = 176,
                            NameKg = "Борбордук Африка Республикасы",
                            NameRu = "ЦАР"
                        },
                        new
                        {
                            Id = 177,
                            NameKg = "Чад",
                            NameRu = "Чад"
                        },
                        new
                        {
                            Id = 178,
                            NameKg = "Черногория",
                            NameRu = "Черногория"
                        },
                        new
                        {
                            Id = 179,
                            NameKg = "Чехия",
                            NameRu = "Чехия"
                        },
                        new
                        {
                            Id = 180,
                            NameKg = "Чили",
                            NameRu = "Чили"
                        },
                        new
                        {
                            Id = 181,
                            NameKg = "Швейцария",
                            NameRu = "Швейцария"
                        },
                        new
                        {
                            Id = 182,
                            NameKg = "Швеция",
                            NameRu = "Швеция"
                        },
                        new
                        {
                            Id = 183,
                            NameKg = "Шри-Ланка",
                            NameRu = "Шри-Ланка	"
                        },
                        new
                        {
                            Id = 184,
                            NameKg = "Эквадор",
                            NameRu = "Эквадор"
                        },
                        new
                        {
                            Id = 185,
                            NameKg = "Экваториалдык Гвинея",
                            NameRu = "Экваториальная Гвинея"
                        },
                        new
                        {
                            Id = 186,
                            NameKg = "Эритрея",
                            NameRu = "Эритрея"
                        },
                        new
                        {
                            Id = 187,
                            NameKg = "Эсватини",
                            NameRu = "Эсватини"
                        },
                        new
                        {
                            Id = 188,
                            NameKg = "Эстония",
                            NameRu = "Эстония"
                        },
                        new
                        {
                            Id = 189,
                            NameKg = "Эфиопия",
                            NameRu = "Эфиопия"
                        },
                        new
                        {
                            Id = 190,
                            NameKg = "Түштүк Африка Республикасы",
                            NameRu = "ЮАР"
                        },
                        new
                        {
                            Id = 191,
                            NameKg = "Түштүк Судан",
                            NameRu = "Южный Судан"
                        },
                        new
                        {
                            Id = 192,
                            NameKg = "Ямайка",
                            NameRu = "Ямайка"
                        },
                        new
                        {
                            Id = 193,
                            NameKg = "Жапония",
                            NameRu = "Япония"
                        });
                });

            modelBuilder.Entity("Domain.Dictionary.Education", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("NameKg")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("name_kg");

                    b.Property<string>("NameRu")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("name_ru");

                    b.HasKey("Id");

                    b.ToTable("educations", "main");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            NameKg = "Начальное и ниже",
                            NameRu = "Начальное и ниже"
                        },
                        new
                        {
                            Id = 2,
                            NameKg = "Неполное среднее",
                            NameRu = "Неполное среднее"
                        },
                        new
                        {
                            Id = 3,
                            NameKg = "Среднее общее",
                            NameRu = "Среднее общее"
                        },
                        new
                        {
                            Id = 4,
                            NameKg = "Среднее специальное",
                            NameRu = "Среднее специальное"
                        },
                        new
                        {
                            Id = 5,
                            NameKg = "Незаконченное высшее",
                            NameRu = "Незаконченное высшее"
                        },
                        new
                        {
                            Id = 6,
                            NameKg = "Высшее",
                            NameRu = "Высшее"
                        });
                });

            modelBuilder.Entity("Domain.Dictionary.Position", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("NameKg")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("name_kg");

                    b.Property<string>("NameRu")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("name_ru");

                    b.HasKey("Id");

                    b.ToTable("positions", "main");
                });

            modelBuilder.Entity("Domain.Entities.ApplicationRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("Note")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", "main");
                });

            modelBuilder.Entity("Domain.Entities.ApplicationUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("integer");

                    b.Property<string>("Email")
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.Property<byte[]>("Image")
                        .HasMaxLength(4194304)
                        .HasColumnType("bytea");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("integer");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PatronymicName")
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("Pin")
                        .HasMaxLength(14)
                        .HasColumnType("character(14)")
                        .IsFixedLength();

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("ModifiedBy");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", "main");
                });

            modelBuilder.Entity("Domain.Entities.ApplicationUserRole", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.Property<int>("RoleId")
                        .HasColumnType("integer");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", "main");
                });

            modelBuilder.Entity("Domain.Entities.Candidate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("CandidateTypeId")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnName("candidate_type_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("integer")
                        .HasColumnName("created_by");

                    b.Property<byte[]>("Image")
                        .HasMaxLength(4194304)
                        .HasColumnType("bytea")
                        .HasColumnName("image");

                    b.Property<string>("ImageName")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnName("image_name");

                    b.Property<int>("MemberId")
                        .HasColumnType("integer")
                        .HasColumnName("member_id");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("modified_at");

                    b.Property<int>("ModifiedBy")
                        .HasColumnType("integer")
                        .HasColumnName("modified_by");

                    b.HasKey("Id");

                    b.HasIndex("CandidateTypeId");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("MemberId");

                    b.HasIndex("ModifiedBy");

                    b.ToTable("candidates", "main");

                    b.HasDiscriminator<string>("CandidateTypeId").HasValue("Candidate");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Domain.Entities.CandidateType", b =>
                {
                    b.Property<string>("NameEn")
                        .HasColumnType("text");

                    b.Property<string>("NameKg")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("NameRu")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("NameEn");

                    b.ToTable("CandidateType", "main");
                });

            modelBuilder.Entity("Domain.Entities.CandidateTypesDocumentTypes", b =>
                {
                    b.Property<string>("CandidateTypeId")
                        .HasColumnType("text");

                    b.Property<int>("DocumentTypeId")
                        .HasColumnType("integer");

                    b.HasKey("CandidateTypeId", "DocumentTypeId");

                    b.HasIndex("DocumentTypeId");

                    b.ToTable("CandidateTypesDocumentTypes", "main");
                });

            modelBuilder.Entity("Domain.Entities.Document", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<byte[]>("Bytes")
                        .IsRequired()
                        .HasColumnType("bytea");

                    b.Property<int>("DocumentTypeId")
                        .HasColumnType("integer");

                    b.Property<string>("Extension")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("RewardApplicationId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("DocumentTypeId");

                    b.HasIndex("RewardApplicationId");

                    b.ToTable("Document", "main");
                });

            modelBuilder.Entity("Domain.Entities.DocumentType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("NameKg")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("NameRu")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("Required")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.ToTable("DocumentType", "main");
                });

            modelBuilder.Entity("Domain.Entities.Member", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Pin")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Pin")
                        .IsUnique();

                    b.ToTable("Members", "main");
                });

            modelBuilder.Entity("Domain.Entities.Office", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("integer")
                        .HasColumnName("created_by");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("modified_at");

                    b.Property<int>("ModifiedBy")
                        .HasColumnType("integer")
                        .HasColumnName("modified_by");

                    b.Property<string>("NameKg")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnName("name_kg");

                    b.Property<string>("NameRu")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnName("name_ru");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("ModifiedBy");

                    b.ToTable("offices", "main");
                });

            modelBuilder.Entity("Domain.Entities.OfficeRelationship", b =>
                {
                    b.Property<int>("ChildOfficeId")
                        .HasColumnType("integer");

                    b.Property<int>("ParentOfficeId")
                        .HasColumnType("integer");

                    b.HasKey("ChildOfficeId", "ParentOfficeId");

                    b.HasIndex("ParentOfficeId");

                    b.ToTable("office_relationships", "main");
                });

            modelBuilder.Entity("Domain.Entities.PinAbsenceReason", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("MemberId")
                        .HasColumnType("integer");

                    b.Property<string>("Reason")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("MemberId")
                        .IsUnique();

                    b.ToTable("PinAbsenceReason", "main");
                });

            modelBuilder.Entity("Domain.Entities.Reward", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("integer")
                        .HasColumnName("created_by");

                    b.Property<byte[]>("Image")
                        .IsRequired()
                        .HasMaxLength(4194304)
                        .HasColumnType("bytea")
                        .HasColumnName("image");

                    b.Property<string>("ImageName")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("image_name");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("modified_at");

                    b.Property<int>("ModifiedBy")
                        .HasColumnType("integer")
                        .HasColumnName("modified_by");

                    b.Property<string>("NameKg")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("name_kg");

                    b.Property<string>("NameRu")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("name_ru");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("ModifiedBy");

                    b.ToTable("rewards", "main");
                });

            modelBuilder.Entity("Domain.Entities.RewardApplication", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CandidateTypeId")
                        .HasColumnType("integer")
                        .HasColumnName("candidate_type_id");

                    b.Property<string>("CandidateTypeNameEn")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnName("candidate_type_name_en");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("integer")
                        .HasColumnName("created_by");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("modified_at");

                    b.Property<int>("ModifiedBy")
                        .HasColumnType("integer")
                        .HasColumnName("modified_by");

                    b.Property<string>("Region")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("region");

                    b.Property<int>("RewardCandidateId")
                        .HasColumnType("integer")
                        .HasColumnName("reward_candidate_id");

                    b.Property<int>("RewardId")
                        .HasColumnType("integer")
                        .HasColumnName("reward_id");

                    b.Property<string>("SpecialAchievements")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnName("special_achievements");

                    b.HasKey("Id");

                    b.HasIndex("CandidateTypeNameEn");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("ModifiedBy");

                    b.HasIndex("RewardCandidateId");

                    b.HasIndex("RewardId");

                    b.ToTable("reward_applications", "main");
                });

            modelBuilder.Entity("Domain.Entities.RewardApplicationStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("ChangeDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("OfficeId")
                        .HasColumnType("integer");

                    b.Property<int?>("PreviousStatusId")
                        .HasColumnType("integer");

                    b.Property<int>("RewardApplicationId")
                        .HasColumnType("integer");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("OfficeId");

                    b.HasIndex("PreviousStatusId");

                    b.HasIndex("RewardApplicationId");

                    b.ToTable("RewardApplicationStatuses", "main");
                });

            modelBuilder.Entity("Domain.Entities.UserOffice", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.Property<int>("OfficeId")
                        .HasColumnType("integer")
                        .HasColumnName("office_id");

                    b.HasKey("UserId", "OfficeId");

                    b.HasIndex("OfficeId");

                    b.ToTable("user_offices", "main");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<int>("RoleId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", "main");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", "main");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", "main");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", "main");
                });

            modelBuilder.Entity("Domain.Entities.Entity", b =>
                {
                    b.HasBaseType("Domain.Entities.Candidate");

                    b.Property<string>("NameKg")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("name_kg");

                    b.Property<string>("NameRu")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("name_ru");

                    b.ToTable("candidates", "main");

                    b.HasDiscriminator().HasValue("Entity");
                });

            modelBuilder.Entity("Domain.Entities.Person", b =>
                {
                    b.HasBaseType("Domain.Entities.Candidate");

                    b.Property<DateOnly>("BirthDate")
                        .HasColumnType("date")
                        .HasColumnName("birth_date");

                    b.Property<DateOnly?>("DeathDate")
                        .HasColumnType("date")
                        .HasColumnName("death_date");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnName("first_name");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("gender");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnName("last_name");

                    b.Property<string>("PatronymicName")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnName("patronymic_name");

                    b.HasDiscriminator().HasValue("Person");
                });

            modelBuilder.Entity("Domain.Entities.Citizen", b =>
                {
                    b.HasBaseType("Domain.Entities.Person");

                    b.Property<string>("ActualAddress")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("actual_address");

                    b.Property<int>("EducationId")
                        .HasColumnType("integer")
                        .HasColumnName("education_id");

                    b.Property<string>("PassportNumber")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("passport_number");

                    b.Property<string>("RegisteredAddress")
                        .IsRequired()
                        .ValueGeneratedOnUpdateSometimes()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("registered_address");

                    b.Property<string>("ScienceDegree")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("science_degree");

                    b.Property<int>("YearsOfWorkInCollective")
                        .HasColumnType("integer")
                        .HasColumnName("years_of_work_in_collective");

                    b.Property<int>("YearsOfWorkInIndustry")
                        .HasColumnType("integer")
                        .HasColumnName("years_of_work_in_industry");

                    b.Property<int>("YearsOfWorkTotal")
                        .HasColumnType("integer")
                        .HasColumnName("years_of_work_total");

                    b.HasIndex("EducationId");

                    b.ToTable("candidates", "main");

                    b.HasDiscriminator().HasValue("Citizen");
                });

            modelBuilder.Entity("Domain.Entities.Foreigner", b =>
                {
                    b.HasBaseType("Domain.Entities.Person");

                    b.Property<int>("CitizenshipId")
                        .HasColumnType("integer")
                        .HasColumnName("citizenship_id");

                    b.HasIndex("CitizenshipId");

                    b.ToTable("candidates", "main");

                    b.HasDiscriminator().HasValue("Foreigner");
                });

            modelBuilder.Entity("Domain.Entities.Mother", b =>
                {
                    b.HasBaseType("Domain.Entities.Person");

                    b.Property<string>("ActualAddress")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("actual_address");

                    b.Property<string>("PassportNumber")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("passport_number");

                    b.Property<string>("RegisteredAddress")
                        .IsRequired()
                        .ValueGeneratedOnUpdateSometimes()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("registered_address");

                    b.ToTable("candidates", "main");

                    b.HasDiscriminator().HasValue("Mother");
                });

            modelBuilder.Entity("Domain.Entities.ApplicationUser", b =>
                {
                    b.HasOne("Domain.Entities.ApplicationUser", "CreatedByUser")
                        .WithMany("CreatedUsers")
                        .HasForeignKey("CreatedBy");

                    b.HasOne("Domain.Entities.ApplicationUser", "ModifiedByUser")
                        .WithMany("ModifiedUsers")
                        .HasForeignKey("ModifiedBy");

                    b.Navigation("CreatedByUser");

                    b.Navigation("ModifiedByUser");
                });

            modelBuilder.Entity("Domain.Entities.ApplicationUserRole", b =>
                {
                    b.HasOne("Domain.Entities.ApplicationRole", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.ApplicationUser", "User")
                        .WithMany("Roles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Entities.Candidate", b =>
                {
                    b.HasOne("Domain.Entities.CandidateType", "CandidateType")
                        .WithMany()
                        .HasForeignKey("CandidateTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.ApplicationUser", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Member", "Member")
                        .WithMany("Candidates")
                        .HasForeignKey("MemberId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.ApplicationUser", "ModifiedByUser")
                        .WithMany()
                        .HasForeignKey("ModifiedBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CandidateType");

                    b.Navigation("CreatedByUser");

                    b.Navigation("Member");

                    b.Navigation("ModifiedByUser");
                });

            modelBuilder.Entity("Domain.Entities.CandidateTypesDocumentTypes", b =>
                {
                    b.HasOne("Domain.Entities.CandidateType", "CandidateType")
                        .WithMany("CandidateTypesDocumentTypes")
                        .HasForeignKey("CandidateTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.DocumentType", "DocumentType")
                        .WithMany("CandidateTypesDocumentTypes")
                        .HasForeignKey("DocumentTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CandidateType");

                    b.Navigation("DocumentType");
                });

            modelBuilder.Entity("Domain.Entities.Document", b =>
                {
                    b.HasOne("Domain.Entities.DocumentType", "DocumentType")
                        .WithMany()
                        .HasForeignKey("DocumentTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.RewardApplication", null)
                        .WithMany("Documents")
                        .HasForeignKey("RewardApplicationId");

                    b.Navigation("DocumentType");
                });

            modelBuilder.Entity("Domain.Entities.Office", b =>
                {
                    b.HasOne("Domain.Entities.ApplicationUser", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.ApplicationUser", "ModifiedByUser")
                        .WithMany()
                        .HasForeignKey("ModifiedBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreatedByUser");

                    b.Navigation("ModifiedByUser");
                });

            modelBuilder.Entity("Domain.Entities.OfficeRelationship", b =>
                {
                    b.HasOne("Domain.Entities.Office", "ChildOffice")
                        .WithMany("ParentOffices")
                        .HasForeignKey("ChildOfficeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Office", "ParentOffice")
                        .WithMany("ChildOffices")
                        .HasForeignKey("ParentOfficeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ChildOffice");

                    b.Navigation("ParentOffice");
                });

            modelBuilder.Entity("Domain.Entities.PinAbsenceReason", b =>
                {
                    b.HasOne("Domain.Entities.Member", "Member")
                        .WithOne("PinAbsenceReason")
                        .HasForeignKey("Domain.Entities.PinAbsenceReason", "MemberId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Member");
                });

            modelBuilder.Entity("Domain.Entities.Reward", b =>
                {
                    b.HasOne("Domain.Entities.ApplicationUser", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.ApplicationUser", "ModifiedByUser")
                        .WithMany()
                        .HasForeignKey("ModifiedBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreatedByUser");

                    b.Navigation("ModifiedByUser");
                });

            modelBuilder.Entity("Domain.Entities.RewardApplication", b =>
                {
                    b.HasOne("Domain.Entities.CandidateType", "CandidateType")
                        .WithMany()
                        .HasForeignKey("CandidateTypeNameEn")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.ApplicationUser", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.ApplicationUser", "ModifiedByUser")
                        .WithMany()
                        .HasForeignKey("ModifiedBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Candidate", "RewardCandidate")
                        .WithMany("Applications")
                        .HasForeignKey("RewardCandidateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Reward", "Reward")
                        .WithMany()
                        .HasForeignKey("RewardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CandidateType");

                    b.Navigation("CreatedByUser");

                    b.Navigation("ModifiedByUser");

                    b.Navigation("Reward");

                    b.Navigation("RewardCandidate");
                });

            modelBuilder.Entity("Domain.Entities.RewardApplicationStatus", b =>
                {
                    b.HasOne("Domain.Entities.Office", "Office")
                        .WithMany()
                        .HasForeignKey("OfficeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.RewardApplicationStatus", "PreviousStatus")
                        .WithMany()
                        .HasForeignKey("PreviousStatusId");

                    b.HasOne("Domain.Entities.RewardApplication", "RewardApplication")
                        .WithMany("RewardApplicationStatuses")
                        .HasForeignKey("RewardApplicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Office");

                    b.Navigation("PreviousStatus");

                    b.Navigation("RewardApplication");
                });

            modelBuilder.Entity("Domain.Entities.UserOffice", b =>
                {
                    b.HasOne("Domain.Entities.Office", "Office")
                        .WithMany("UserOffices")
                        .HasForeignKey("OfficeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.ApplicationUser", "User")
                        .WithMany("UserOffices")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Office");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("Domain.Entities.ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("Domain.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("Domain.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("Domain.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Entities.Citizen", b =>
                {
                    b.HasOne("Domain.Dictionary.Education", "Education")
                        .WithMany("Citizens")
                        .HasForeignKey("EducationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Education");
                });

            modelBuilder.Entity("Domain.Entities.Foreigner", b =>
                {
                    b.HasOne("Domain.Dictionary.Citizenship", "Citizenship")
                        .WithMany("Foreigners")
                        .HasForeignKey("CitizenshipId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Citizenship");
                });

            modelBuilder.Entity("Domain.Dictionary.Citizenship", b =>
                {
                    b.Navigation("Foreigners");
                });

            modelBuilder.Entity("Domain.Dictionary.Education", b =>
                {
                    b.Navigation("Citizens");
                });

            modelBuilder.Entity("Domain.Entities.ApplicationRole", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("Domain.Entities.ApplicationUser", b =>
                {
                    b.Navigation("CreatedUsers");

                    b.Navigation("ModifiedUsers");

                    b.Navigation("Roles");

                    b.Navigation("UserOffices");
                });

            modelBuilder.Entity("Domain.Entities.Candidate", b =>
                {
                    b.Navigation("Applications");
                });

            modelBuilder.Entity("Domain.Entities.CandidateType", b =>
                {
                    b.Navigation("CandidateTypesDocumentTypes");
                });

            modelBuilder.Entity("Domain.Entities.DocumentType", b =>
                {
                    b.Navigation("CandidateTypesDocumentTypes");
                });

            modelBuilder.Entity("Domain.Entities.Member", b =>
                {
                    b.Navigation("Candidates");

                    b.Navigation("PinAbsenceReason");
                });

            modelBuilder.Entity("Domain.Entities.Office", b =>
                {
                    b.Navigation("ChildOffices");

                    b.Navigation("ParentOffices");

                    b.Navigation("UserOffices");
                });

            modelBuilder.Entity("Domain.Entities.RewardApplication", b =>
                {
                    b.Navigation("Documents");

                    b.Navigation("RewardApplicationStatuses");
                });
#pragma warning restore 612, 618
        }
    }
}
